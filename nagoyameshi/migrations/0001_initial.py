# Generated by Django 4.2.6 on 2023-12-25 19:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('paid', models.BooleanField(verbose_name='有料会員')),
                ('name', models.CharField(max_length=50, verbose_name='名前')),
                ('email', models.EmailField(max_length=50, verbose_name='email')),
                ('password', models.CharField(max_length=10, verbose_name='パスワード')),
                ('cardholder_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='クレジットカード登録名')),
                ('card_number', models.CharField(blank=True, max_length=16, null=True, verbose_name='カード番号')),
                ('expiration_date', models.DateField(blank=True, null=True, verbose_name='有効期限')),
                ('cvv', models.CharField(blank=True, max_length=4, null=True, verbose_name='パスワード')),
                ('created_at', models.DateField(auto_now_add=True, null=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kodawari', models.CharField(max_length=50, verbose_name='こだわり条件')),
            ],
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='店名')),
                ('image', models.ImageField(blank=True, default='noImage.png', upload_to='media_local', verbose_name='写真')),
                ('phonenumber', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='JP', verbose_name='電話番号')),
                ('address', models.CharField(max_length=100, verbose_name='住所')),
                ('access', models.CharField(max_length=100, verbose_name='アクセス')),
                ('neareststation', models.CharField(max_length=50, verbose_name='最寄駅')),
                ('shop_reservation', models.BooleanField(verbose_name='予約')),
                ('nosmoking', models.BooleanField(verbose_name='禁煙')),
                ('smokingbooth', models.BooleanField(verbose_name='喫煙ブース')),
                ('parking', models.BooleanField(verbose_name='駐車場')),
                ('openingdate', models.DateField(verbose_name='開業日')),
                ('seats', models.PositiveIntegerField(verbose_name='席数')),
                ('opening_time', models.TimeField(verbose_name='開店時間')),
                ('closing_time', models.TimeField(verbose_name='閉店時間')),
                ('day_of_week', models.IntegerField(choices=[('月曜日', '月曜日'), ('火曜日', '火曜日'), ('水曜日', '水曜日'), ('木曜日', '木曜日'), ('金曜日', '金曜日'), ('土曜日', '土曜日'), ('日曜日', '日曜日'), ('祝日', '祝日'), ('無休', '無休')], verbose_name='店休日')),
                ('sns', models.URLField(blank=True, max_length=100, null=True)),
                ('budget', models.PositiveIntegerField(verbose_name='予算(円)')),
                ('genre', models.CharField(choices=[('和食', '和食'), ('洋食', '洋食'), ('魚介', '魚介'), ('ピザ・パスタ', 'ピザ・パスタ'), ('カレー', 'カレー')], max_length=20, verbose_name='ジャンル')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('condition', models.ManyToManyField(to='nagoyameshi.condition', verbose_name='こだわり条件')),
            ],
        ),
        migrations.CreateModel(
            name='Sales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.PositiveIntegerField(verbose_name='売上')),
                ('members', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='有料会員')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='', verbose_name='写真')),
                ('score', models.PositiveSmallIntegerField(choices=[(1, '★'), (2, '★★'), (3, '★★★'), (4, '★★★★'), (5, '★★★★★')], default=3, verbose_name='レビュースコア')),
                ('comment', models.TextField(verbose_name='コメント')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('review_member', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='レビュー者')),
                ('review_shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='nagoyameshi.shop', verbose_name='店舗')),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateTimeField(verbose_name='予約日時')),
                ('numpeople', models.IntegerField(verbose_name='予約人数')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('res_customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='予約者')),
                ('reserve_shop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='nagoyameshi.shop', verbose_name='店舗')),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='登録者')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='nagoyameshi.shop', verbose_name='店舗')),
            ],
        ),
    ]
